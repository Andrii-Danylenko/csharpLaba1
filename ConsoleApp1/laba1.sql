create schema if not exists public;
create table if not exists stores (
id int not null generated by default as identity,
address varchar not null,
storeName varchar not null,
director varchar not null,
constraint PK_STORES primary key (id)
);

create table if not exists supplierAddresses (
id int not null generated by default as identity,
city varchar not null,
country varchar not null,
address varchar not null,
constraint PK_SUPPLIERADDRESSES primary key (id)
);

create table if not exists suppliers (
id int not null generated by default as identity,
supplierName varchar not null unique,
addressId int not null,
constraint PK_SUPPLIERS primary key (id),
constraint FK_SUPPLIERS foreign key (addressId) references supplierAddresses (id) ON DELETE CASCADE
); 

create table if not exists books (
id int not null generated by default as identity,
bookName varchar not null unique,
author varchar not null,
publisher varchar not null,
genre varchar not null,
bookCost numeric(10, 2) not null,
constraint PK_BOOKS primary key (id)
);
create table if not exists bookStorage (
id int not null generated by default as identity,
isAvailable bool not null default true,
bookId int not null,
constraint PK_BOOKSTORAGE primary key (id),
constraint FK_BOOKID foreign key (bookId) references books (id) ON DELETE CASCADE
);

create table if not exists supplies (
id int not null generated by default as identity,
supplyDate timestamp not null,
supplyCost numeric(10, 2) not null,
supplierId int not null,
bookId int not null,
constraint PK_SUPPLIES primary key (id),
constraint FK_SUPPLIERID foreign key (supplierId) references suppliers (id) ON DELETE CASCADE,
constraint FK_BOOKID foreign key (bookId) references books (id) ON DELETE CASCADE
);

create table if not exists reservations (
id int not null generated by default as identity,
storeId int not null,
productId int not null,
reservationDate timestamp not null,
constraint PK_RESERVATIONS primary key (id),
constraint FK_STOREID foreign key (storeId) references stores (id)  ON DELETE CASCADE,
constraint FK_PRODUCTID foreign key (productId) references bookStorage (id)  ON DELETE CASCADE
);



INSERT INTO stores (address, storeName, director) VALUES 
('123 Main St', 'Book Haven', 'John Doe'),
('456 Elm St', 'Readers Paradise', 'Jane Smith'),
('789 Oak St', 'Literature Corner', 'Michael Johnson');

INSERT INTO supplierAddresses (city, country, address) VALUES 
('New York', 'USA', '12 Broadway St'),
('London', 'UK', '25 Queen St'),
('Paris', 'France', '78 Champs-Elysees');

INSERT INTO suppliers (supplierName, addressId) VALUES 
('Global Books', 1),
('UK Book Supply', 2),
('France Book Network', 3);

INSERT INTO books (bookName, author, publisher, genre, bookCost) VALUES 
('The Great Gatsby', 'F. Scott Fitzgerald', 'Scribner', 'Novel', 10.99),
('1984', 'George Orwell', 'Secker & Warburg', 'Dystopian', 12.50),
('Pride and Prejudice', 'Jane Austen', 'T. Egerton', 'Romance', 8.75);

INSERT INTO bookStorage (isAvailable, bookId) VALUES 
(true, 1),
(true, 2),
(false, 3);

INSERT INTO supplies (supplyDate, supplyCost, supplierId, bookId) VALUES 
('2023-09-01 10:30:00', 100.50, 1, 1),
('2023-09-02 12:45:00', 75.00, 2, 2),
('2023-09-03 09:15:00', 120.00, 3, 3);

INSERT INTO reservations (storeId, productId, reservationDate) VALUES 
(1, 1, '2023-09-05 14:00:00'),
(2, 2, '2023-09-06 16:30:00'),
(3, 3, '2023-09-07 11:45:00');
